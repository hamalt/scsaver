
  /**
   * @license
   * Scsaver.js v0.1.2
   * Released under the MIT License.
   */

(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var Scsaver = (function () {
  'use strict';

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  function _regeneratorRuntime() {
    /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */

    _regeneratorRuntime = function () {
      return exports;
    };

    var exports = {},
        Op = Object.prototype,
        hasOwn = Op.hasOwnProperty,
        $Symbol = "function" == typeof Symbol ? Symbol : {},
        iteratorSymbol = $Symbol.iterator || "@@iterator",
        asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
        toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    function define(obj, key, value) {
      return Object.defineProperty(obj, key, {
        value: value,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }), obj[key];
    }

    try {
      define({}, "");
    } catch (err) {
      define = function (obj, key, value) {
        return obj[key] = value;
      };
    }

    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
          generator = Object.create(protoGenerator.prototype),
          context = new Context(tryLocsList || []);
      return generator._invoke = function (innerFn, self, context) {
        var state = "suspendedStart";
        return function (method, arg) {
          if ("executing" === state) throw new Error("Generator is already running");

          if ("completed" === state) {
            if ("throw" === method) throw arg;
            return doneResult();
          }

          for (context.method = method, context.arg = arg;;) {
            var delegate = context.delegate;

            if (delegate) {
              var delegateResult = maybeInvokeDelegate(delegate, context);

              if (delegateResult) {
                if (delegateResult === ContinueSentinel) continue;
                return delegateResult;
              }
            }

            if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
              if ("suspendedStart" === state) throw state = "completed", context.arg;
              context.dispatchException(context.arg);
            } else "return" === context.method && context.abrupt("return", context.arg);
            state = "executing";
            var record = tryCatch(innerFn, self, context);

            if ("normal" === record.type) {
              if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
              return {
                value: record.arg,
                done: context.done
              };
            }

            "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
          }
        };
      }(innerFn, self, context), generator;
    }

    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }

    exports.wrap = wrap;
    var ContinueSentinel = {};

    function Generator() {}

    function GeneratorFunction() {}

    function GeneratorFunctionPrototype() {}

    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function () {
      return this;
    });
    var getProto = Object.getPrototypeOf,
        NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);

    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        define(prototype, method, function (arg) {
          return this._invoke(method, arg);
        });
      });
    }

    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);

        if ("throw" !== record.type) {
          var result = record.arg,
              value = result.value;
          return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          }) : PromiseImpl.resolve(value).then(function (unwrapped) {
            result.value = unwrapped, resolve(result);
          }, function (error) {
            return invoke("throw", error, resolve, reject);
          });
        }

        reject(record.arg);
      }

      var previousPromise;

      this._invoke = function (method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      };
    }

    function maybeInvokeDelegate(delegate, context) {
      var method = delegate.iterator[context.method];

      if (undefined === method) {
        if (context.delegate = null, "throw" === context.method) {
          if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel;
          context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method");
        }

        return ContinueSentinel;
      }

      var record = tryCatch(method, delegate.iterator, context.arg);
      if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
      var info = record.arg;
      return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
    }

    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };
      1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal", delete record.arg, entry.completion = record;
    }

    function Context(tryLocsList) {
      this.tryEntries = [{
        tryLoc: "root"
      }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
    }

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) return iteratorMethod.call(iterable);
        if ("function" == typeof iterable.next) return iterable;

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;

            return next.value = undefined, next.done = !0, next;
          };

          return next.next = next;
        }
      }

      return {
        next: doneResult
      };
    }

    function doneResult() {
      return {
        value: undefined,
        done: !0
      };
    }

    return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
      var ctor = "function" == typeof genFun && genFun.constructor;
      return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
    }, exports.mark = function (genFun) {
      return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
    }, exports.awrap = function (arg) {
      return {
        __await: arg
      };
    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
      return this;
    }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      void 0 === PromiseImpl && (PromiseImpl = Promise);
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
      return this;
    }), define(Gp, "toString", function () {
      return "[object Generator]";
    }), exports.keys = function (object) {
      var keys = [];

      for (var key in object) keys.push(key);

      return keys.reverse(), function next() {
        for (; keys.length;) {
          var key = keys.pop();
          if (key in object) return next.value = key, next.done = !1, next;
        }

        return next.done = !0, next;
      };
    }, exports.values = values, Context.prototype = {
      constructor: Context,
      reset: function (skipTempReset) {
        if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
      },
      stop: function () {
        this.done = !0;
        var rootRecord = this.tryEntries[0].completion;
        if ("throw" === rootRecord.type) throw rootRecord.arg;
        return this.rval;
      },
      dispatchException: function (exception) {
        if (this.done) throw exception;
        var context = this;

        function handle(loc, caught) {
          return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i],
              record = entry.completion;
          if ("root" === entry.tryLoc) return handle("end");

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc"),
                hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            } else {
              if (!hasFinally) throw new Error("try statement without catch or finally");
              if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
            }
          }
        }
      },
      abrupt: function (type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
        var record = finallyEntry ? finallyEntry.completion : {};
        return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
      },
      complete: function (record, afterLoc) {
        if ("throw" === record.type) throw record.arg;
        return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
      },
      finish: function (finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
        }
      },
      catch: function (tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];

          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;

            if ("throw" === record.type) {
              var thrown = record.arg;
              resetTryEntry(entry);
            }

            return thrown;
          }
        }

        throw new Error("illegal catch attempt");
      },
      delegateYield: function (iterable, resultName, nextLoc) {
        return this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
      }
    }, exports;
  }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  function _asyncToGenerator(fn) {
    return function () {
      var self = this,
          args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);

        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }

        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  var CancellationToken = /*#__PURE__*/function () {
    function CancellationToken() {
      var _this = this;

      var parentToken = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

      _classCallCheck(this, CancellationToken);

      _defineProperty(this, "isCancellationRequested", false);

      this.cancellationPromise = new Promise(function (resolve) {
        _this.cancel = function (e) {
          _this.isCancellationRequested = true;

          if (e) {
            resolve(e);
          } else {
            var err = new Error('cancelled');
            err.cancelled = true;
            resolve(err);
          }
        };
      });

      if (parentToken && parentToken instanceof CancellationToken) {
        parentToken.register(this.cancel);
      }
    }

    _createClass(CancellationToken, [{
      key: "register",
      value: function register(callback) {
        this.cancellationPromise.then(callback);
      }
    }, {
      key: "createDependentToken",
      value: function createDependentToken() {
        return new CancellationToken(this);
      }
    }]);

    return CancellationToken;
  }();

  /**
   * Web page screensaver JavaScript library.
   * @param  {...any} args Selector, options.
   * @returns {Scsaver}
   */

  var Scsaver = /*#__PURE__*/function () {
    /**
     * Defaults for options.
     * @type {Object}
     */

    /**
     * Scsaver element.
     * @type {Element}
     */

    /**
     * Element default selector.
     * @type {String}
     */

    /**
     * Fade in data.
     * @type {Object}
     */

    /**
     * Fade out data.
     * @type {Object}
     */
    function Scsaver() {
      _classCallCheck(this, Scsaver);

      _defineProperty(this, "defaults", {
        timeout: null,
        waitTime: 3200,
        events: ['keydown', 'mousemove', 'touchstart', 'click'],
        showFadeTime: 1000,
        hideFadeTime: 1000,
        autoStart: true,
        doInterval: 200,
        debug: false,
        progressBar: false
      });

      _defineProperty(this, "element", void 0);

      _defineProperty(this, "selector", '#scsaver');

      _defineProperty(this, "waitStateCancelToken", null);

      _defineProperty(this, "waitingTimeoutID", null);

      _defineProperty(this, "waitingAnimID", null);

      _defineProperty(this, "isWaiting", false);

      _defineProperty(this, "isShowing", false);

      _defineProperty(this, "isHidden", true);

      _defineProperty(this, "isFadeIn", false);

      _defineProperty(this, "isFadeOut", false);

      _defineProperty(this, "states", {
        Default: Symbol('Default'),
        Wait: Symbol('Wait'),
        Show: Symbol('Show'),
        ShowFadeInComplete: Symbol('ShowFadeInComplete'),
        Hide: Symbol('Hide'),
        HideFadeOut: Symbol('HideFadeOutComplete'),
        Disabled: Symbol('Disabled'),
        Enabled: Symbol('Enabled')
      });

      _defineProperty(this, "eventPrefix", 'scsaver');

      _defineProperty(this, "beforeState", this.states.Default);

      _defineProperty(this, "currentState", this.states.Default);

      _defineProperty(this, "stateEventName", '');

      _defineProperty(this, "lastEventNow", 0);

      _defineProperty(this, "progressBar", {
        wrapperElement: null,
        barElement: null,
        progress: 0
      });

      _defineProperty(this, "fadeInData", {
        animReqID: null,
        cancelToken: null
      });

      _defineProperty(this, "fadeOutData", {
        animReqID: null,
        cancelToken: null
      });

      // Merge options
      this.settings = _objectSpread2(_objectSpread2({}, this.defaults), arguments.length <= 1 ? undefined : arguments[1]);
      this.selector = (arguments.length <= 0 ? undefined : arguments[0]) || this.selector; // Scsaver Instance

      var scsaver = this;
      this.init();
      return scsaver;
    }
    /**
     * Handle event.
     * @param {*} event
     * @param {*} callback
     */


    _createClass(Scsaver, [{
      key: "on",
      value: function on(event, callback) {
        this.element.addEventListener(event, callback);
      }
    }, {
      key: "init",
      value: function init() {
        this.initElement(); // create scsaver event

        this.initStateEvent();
        this.initAddEvents();

        if (this.settings.progressBar) {
          this.initProgressBar();
        }

        if (this.settings.autoStart) {
          this.start();
        }
      }
    }, {
      key: "initElement",
      value: function initElement() {
        // only one element
        this.element = document.querySelector(this.selector);

        if (null === this.element) {
          throw Error('Scsaver element not found.');
        }
      }
    }, {
      key: "initStateEvent",
      value: function initStateEvent() {
        this.stateEventName = "".concat(this.eventPrefix, "ChangeState");
        var self = this;
        this.element.addEventListener(this.stateEventName, function (e) {
          self.stateController(e.detail.beforeState, e.detail.currentState);
        });
      }
    }, {
      key: "initAddEvents",
      value: function initAddEvents() {
        if (!this.settings.on) return;

        for (var key in this.settings.on) {
          this.on(key, this.settings.on[key]);
        }
      } // TODO: private method

    }, {
      key: "changeState",
      value: function changeState(state) {
        this.beforeState = this.currentState;
        this.currentState = state;
        this.element.dispatchEvent(new CustomEvent("".concat(this.stateEventName), {
          detail: {
            beforeState: this.beforeState,
            currentState: this.currentState
          }
        }));
      }
    }, {
      key: "stateController",
      value: function stateController(beforeState, currentState) {
        switch (currentState) {
          case this.states.Wait:
            this.element.dispatchEvent(new CustomEvent('waitStart', {
              detail: {
                beforeState: beforeState,
                currentState: currentState
              }
            }));
            this.waitState();
            break;

          case this.states.Show:
            this.element.dispatchEvent(new CustomEvent('showStart', {
              detail: {
                beforeState: beforeState,
                currentState: currentState
              }
            }));
            this.showState();
            break;

          case this.states.ShowFadeInComplete:
            this.element.dispatchEvent(new CustomEvent('showFadeInComplete', {
              detail: {
                beforeState: beforeState,
                currentState: currentState
              }
            }));
            break;

          case this.states.Hide:
            this.element.dispatchEvent(new CustomEvent('hideStart', {
              detail: {
                beforeState: beforeState,
                currentState: currentState
              }
            }));
            this.hideState();
            break;

          case this.states.HideFadeOutComplete:
            this.element.dispatchEvent(new CustomEvent('hideFadeOutComplete', {
              detail: {
                beforeState: beforeState,
                currentState: currentState
              }
            }));
            break;

          case this.states.Disabled:
            this.element.dispatchEvent(new CustomEvent('disabledStart', {
              detail: {
                beforeState: beforeState,
                currentState: currentState
              }
            }));
            this.disabledState();
            break;

          case this.states.Enabled:
            this.element.dispatchEvent(new CustomEvent('enabledStart', {
              detail: {
                beforeState: beforeState,
                currentState: currentState
              }
            }));
            this.enabledState();
            break;

          case this.states.Default:
        }
      }
    }, {
      key: "initProgressBar",
      value: function initProgressBar() {
        this.progressBar.wrapperElement = document.createElement('div');
        this.progressBar.wrapperElement.classList.add('scsaver-progress-wrapper');
        var progressBg = document.createElement('div');
        progressBg.classList.add('scsaver-progress-bg');
        this.progressBar.barElement = document.createElement('div');
        this.progressBar.barElement.classList.add('scsaver-progress-bar');
        this.progressBar.barElement.id = 'scsaver-progress-bar';
        progressBg.appendChild(this.progressBar.barElement);
        this.progressBar.wrapperElement.appendChild(progressBg);
        document.body.appendChild(this.progressBar.wrapperElement);
      }
    }, {
      key: "start",
      value: function start() {
        this.registerDoing();
        this.wait();
      }
    }, {
      key: "registerDoing",
      value: function registerDoing() {
        var self = this;
        this.settings.events.forEach(function (event) {
          window.addEventListener(event, self.intervalDoing.bind(self));
        });
      }
    }, {
      key: "unregisterDoing",
      value: function unregisterDoing() {
        var self = this;
        this.settings.events.forEach(function (event) {
          window.removeEventListener(event, self.intervalDoing);
        });
      }
    }, {
      key: "intervalDoing",
      value: function intervalDoing() {
        if (performance.now() - this.lastEventNow <= this.settings.doInterval) return;
        this.doing();
        this.lastEventNow = performance.now();
      }
    }, {
      key: "doing",
      value: function doing() {
        switch (this.currentState) {
          case this.states.Wait:
            this.cancelWait();
            this.wait();
            break;

          case this.states.Show:
          case this.states.ShowFadeInComplete:
            this.cancelFadeIn();
            this.hide();
            break;

          case this.states.Hide:
          case this.states.HideFadeOutComplete:
            if (this.isHidden) this.wait();
            break;

          case this.states.Default:
        }
      }
    }, {
      key: "disabled",
      value: function disabled() {
        this.changeState(this.states.Disabled);
      }
    }, {
      key: "enabled",
      value: function enabled() {
        this.changeState(this.states.Enabled);
      }
    }, {
      key: "wait",
      value: function wait() {
        this.changeState(this.states.Wait);
      }
    }, {
      key: "show",
      value: function show() {
        this.changeState(this.states.Show);
      }
    }, {
      key: "hide",
      value: function hide() {
        this.changeState(this.states.Hide);
      }
    }, {
      key: "disabledState",
      value: function disabledState() {
        this.unregisterDoing();
        this.cancelWait();

        if (this.isShowing) {
          this.cancelFadeIn();
          this.fadeOut();
        }
      }
    }, {
      key: "enabledState",
      value: function enabledState() {
        this.start();
      }
    }, {
      key: "waitState",
      value: function () {
        var _waitState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.prev = 0;

                  if (!this.isWaiting) {
                    _context.next = 3;
                    break;
                  }

                  return _context.abrupt("return");

                case 3:
                  this.waitStateCancelToken = new CancellationToken();
                  _context.next = 6;
                  return this.waiting(this.settings.waitTime, this.waitStateCancelToken);

                case 6:
                  this.show();
                  this.cancelWait();
                  _context.next = 15;
                  break;

                case 10:
                  _context.prev = 10;
                  _context.t0 = _context["catch"](0);

                  if (this.settings.debug) {
                    _context.next = 14;
                    break;
                  }

                  return _context.abrupt("return");

                case 14:
                  console.log(_context.t0.cancelled ? 'Waiting is cancelled.' : 'some other err');

                case 15:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this, [[0, 10]]);
        }));

        function waitState() {
          return _waitState.apply(this, arguments);
        }

        return waitState;
      }()
    }, {
      key: "showState",
      value: function () {
        var _showState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.prev = 0;
                  this.isHidden = false;
                  this.fadeInData.cancelToken = new CancellationToken();
                  _context2.next = 5;
                  return this.fadeIn(this.element, this.settings.showFadeTime, 'block', this.fadeInData.cancelToken);

                case 5:
                  this.clearFadeIn();
                  this.changeState(this.states.ShowFadeInComplete);
                  this.isShowing = true;
                  _context2.next = 15;
                  break;

                case 10:
                  _context2.prev = 10;
                  _context2.t0 = _context2["catch"](0);

                  if (this.settings.debug) {
                    _context2.next = 14;
                    break;
                  }

                  return _context2.abrupt("return");

                case 14:
                  console.log(_context2.t0.cancelled ? 'Fade in is cancelled.' : 'some other err');

                case 15:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this, [[0, 10]]);
        }));

        function showState() {
          return _showState.apply(this, arguments);
        }

        return showState;
      }()
    }, {
      key: "hideState",
      value: function () {
        var _hideState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
          return _regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.prev = 0;
                  this.isShowing = false;
                  this.fadeOutData.cancelToken = new CancellationToken();
                  _context3.next = 5;
                  return this.fadeOut(this.element, this.settings.hideFadeTime, this.fadeOutData.cancelToken);

                case 5:
                  this.clearFadeOut();
                  this.changeState(this.states.HideFadeOutComplete);
                  this.isHidden = true;
                  this.wait();
                  _context3.next = 16;
                  break;

                case 11:
                  _context3.prev = 11;
                  _context3.t0 = _context3["catch"](0);

                  if (this.settings.debug) {
                    _context3.next = 15;
                    break;
                  }

                  return _context3.abrupt("return");

                case 15:
                  console.log(_context3.t0.cancelled ? 'Fade out is cancelled.' : 'some other err');

                case 16:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this, [[0, 11]]);
        }));

        function hideState() {
          return _hideState.apply(this, arguments);
        }

        return hideState;
      }()
    }, {
      key: "cancelWait",
      value: function cancelWait() {
        if (null !== this.waitStateCancelToken) {
          this.waitStateCancelToken.cancel();
          this.waitStateCancelToken = null;
        }

        if (null !== this.waitingAnimID) {
          cancelAnimationFrame(this.waitingAnimID);
          this.waitingAnimID = null;
        }

        if (this.settings.progressBar) {
          this.disabledProgressBar();
        }

        this.isWaiting = false;
      }
      /**
       * Wait for the next process for the specified number of milliseconds.
       * @param {number} time - The number of milliseconds to wait.
       * @param {CancellationToken} cancellationToken - The cancellation token.
       * @returns {Promise<number>}
       */

    }, {
      key: "waiting",
      value: function waiting(waitTime) {
        var cancellationToken = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        this.isWaiting = true;
        var defaultValue = 0;
        var finalValue = 1;
        var start = performance.now();
        var self = this;

        if (this.settings.progressBar) {
          this.enabledProgressBar();
          this.progressBar.barElement.classList.remove('is-filled');
          this.progressBar.barElement.style.width = "".concat(defaultValue, "%");
        }

        return new Promise(function (resolve, reject) {
          self.waitingAnimID = requestAnimationFrame(function waitingProgress(time) {
            var timeFraction = (time - start) / waitTime;
            var progress = Math.min(timeFraction, 1);

            if (self.settings.progressBar) {
              self.progressBar.barElement.style.width = "".concat(progress * 100, "%");
            }

            if (progress < finalValue) {
              self.waitingAnimID = requestAnimationFrame(waitingProgress);
            } else {
              if (self.settings.progressBar) {
                self.progressBar.barElement.classList.add('is-filled');
                self.progressBar.wrapperElement.style.display = 'none';
              }

              self.isWaiting = false;
              resolve();
            }

            if (cancellationToken) {
              cancellationToken.register(reject);
            }
          });
        });
      }
    }, {
      key: "enabledProgressBar",
      value: function enabledProgressBar() {
        this.progressBar.wrapperElement.style.display = 'block';
      }
    }, {
      key: "disabledProgressBar",
      value: function disabledProgressBar() {
        this.progressBar.wrapperElement.style.display = 'none';
      }
    }, {
      key: "fadeIn",
      value: function fadeIn(el) {
        var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2000;
        var display = arguments.length > 2 ? arguments[2] : undefined;
        var cancellationToken = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        this.isFadeIn = true;
        var defaultOpacity = parseFloat(window.getComputedStyle(el).opacity);
        var finalOpacity = 1;
        var start = performance.now();
        var self = this;
        el.style.opacity = defaultOpacity;
        el.style.display = display || 'block';
        return new Promise(function (resolve, reject) {
          self.fadeInData.animReqID = requestAnimationFrame(function fade(time) {
            var timeFraction = (time - start) / duration;
            var progress = Math.min(timeFraction, 1);
            el.style.opacity = defaultOpacity + (finalOpacity - defaultOpacity) * progress;

            if (+el.style.opacity < finalOpacity) {
              self.fadeInData.animReqID = requestAnimationFrame(fade);
            } else {
              el.classList.add('is-fade-in-done');
              el.classList.remove('is-fade-out-done');
              self.isFadeIn = false;
              resolve();
            }

            if (cancellationToken) {
              cancellationToken.register(reject);
            }
          });
        });
      }
    }, {
      key: "fadeOut",
      value: function fadeOut(el) {
        var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2000;
        var cancellationToken = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        this.isFadeOut = true;
        var defaultOpacity = parseFloat(window.getComputedStyle(el).opacity);
        var finalOpacity = 0;
        var start = performance.now();
        var self = this;
        return new Promise(function (resolve, reject) {
          self.fadeOutData.animReqID = requestAnimationFrame(function fade(time) {
            var timeFraction = (time - start) / duration;
            var progress = Math.min(timeFraction, 1);
            el.style.opacity = defaultOpacity - defaultOpacity * progress;

            if (+el.style.opacity > finalOpacity) {
              self.fadeOutData.animReqID = requestAnimationFrame(fade);
            } else {
              el.style.display = 'none';
              el.classList.add('is-fade-out-done');
              el.classList.remove('is-fade-in-done');
              self.isFadeOut = false;
              resolve();
            }

            if (cancellationToken) {
              cancellationToken.register(reject);
            }
          });
        });
      }
    }, {
      key: "clearFadeIn",
      value: function clearFadeIn() {
        this.fadeInData.cancelToken = null;
        this.fadeInData.animReqID = null;
      }
    }, {
      key: "clearFadeOut",
      value: function clearFadeOut() {
        this.fadeOutData.cancelToken = null;
        this.fadeOutData.animReqID = null;
      }
    }, {
      key: "cancelFadeIn",
      value: function cancelFadeIn() {
        if (null !== this.fadeInData.cancelToken) {
          this.fadeInData.cancelToken.cancel();
          this.fadeInData.cancelToken = null;
        }

        if (null !== this.fadeInData.animReqID) {
          cancelAnimationFrame(this.fadeInData.animReqID);
          this.fadeInData.animReqID = null;
        }

        if (this.isFadeIn && null == this.fadeInData.cancelToken && null == this.fadeInData.animReqID) {
          this.isFadeIn = false;
        }
      }
    }, {
      key: "cancelFadeOut",
      value: function cancelFadeOut() {
        if (null !== this.fadeOutData.cancelToken) {
          this.fadeOutData.cancelToken.cancel();
          this.fadeOutData.cancelToken = null;
        }

        if (null !== this.fadeOutData.animReqID) {
          cancelAnimationFrame(this.fadeOutData.animReqID);
          this.fadeOutData.animReqID = null;
        }

        if (this.isFadeOut && null == this.fadeOutData.cancelToken && null == this.fadeOutData.animReqID) {
          this.isFadeOut = false;
        }
      }
    }]);

    return Scsaver;
  }();

  return Scsaver;

})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
